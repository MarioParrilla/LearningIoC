package com.marioparrilla.snake;import com.marioparrilla.snake.annotations.AutoConfig;import com.marioparrilla.snake.annotations.OpenEgg;import com.marioparrilla.snake.context.ApplicationContext;import com.marioparrilla.snake.context.AutoConfigApplicationContext;import com.marioparrilla.snake.context.SnakeApplication;import com.marioparrilla.snake.ObjectsToTest.Dependency;import com.marioparrilla.snake.ObjectsToTest.Example;import com.marioparrilla.snake.utils.LogUtils;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;@AutoConfig(scan = {Dependency.class, SnakeAppTest.class, CestToTest.class})public class SnakeAppTest {    private static AutoConfigApplicationContext context;    @BeforeAll    public static void init() throws Exception {        context = SnakeApplication.init(SnakeAppTest.class)//                .cestsToScan(new Class[]{CestToTest.class})//                .classesToScan(new Class[]{SnakeAppTest.class, Dependency.class})//                .enableVerboseLogTrace()                .run();        context.readPropertiesFile();    }    @OpenEgg    public static Dependency dependency;    @Test    public void sayHelloTest() {        dependency.sayHello();    }    @Test    public void testLogInfo() {        LogUtils.info("TestLog Info", SnakeAppTest.class, true);    }    @Test    public void testLogWarn() {        LogUtils.warn("TestLog warn", SnakeAppTest.class, true);    }    @Test    public void testLogError() {        LogUtils.error("TestLog error", SnakeAppTest.class, true);    }    @Test    public void testLogDebug() {        LogUtils.debug("TestLog debug", SnakeAppTest.class, true);    }    @Test    public void testLogTrace() {        LogUtils.trace("TestLog trace", SnakeAppTest.class, true);    }    @Test    public void getEggByNameWorking() {        assertNotNull(context.getEgg("exa"));    }    @Test    public void getEggByNameNotWorking() {        assertNull(context.getEgg("e"));    }    @Test    public void getEggByClassWorking() throws Exception {        assertNotNull(context.getEgg(Example.class).getClass());    }    @Test    public void getEggByClassNotWorking() {        assertNull(context.getEgg(Integer.class));    }    @Test    public void getEggByNameAndClassWorking() {        assertNotNull(context.getEgg("exa" ,Example.class));    }    @Test    public void getEggByNameAndClassNotWorking() {        assertNull(context.getEgg("exa3", Example.class));    }    @Test    public void containsEggNameWorking() {        assertTrue(context.containsEgg("exa"));    }    @Test    public void containsEggNameNotWorking() {        assertFalse(context.containsEgg("e"));    }    @Test    public void containsEggClassWorking() throws Exception {        assertTrue(context.containsEgg(Example.class));    }    @Test    public void containsEggClassNotWorking() {        assertFalse(context.containsEgg(Integer.class));    }    @Test    public void containsEggNameAndClassWorking() throws Exception {        assertTrue(context.containsEgg("exa", Example.class));    }    @Test    public void containsEggNameAndClassNotWorking() {        assertFalse(context.containsEgg("exa", Dependency.class));    }}